import requests
import json
import hashlib
import time

# --- CONFIGURATION ---
EMAIL = "hothanhcong1998@gmail.com"
PASSWORD = "Remonimbzuai@2025"
POLL_INTERVAL_SECONDS = 10  # Check every 10 seconds
EXPORT_JSON = True
JSON_FILENAME = "libreview_glucose_readings.json"

# --- LIBREVIEW CLIENT CLASS ---
class LibreViewAPI:
    def __init__(self):
        self.base_url = "https://api.libreview.io"
        self.token = None
        self.account_id = None
        self.headers = {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
            'product': 'llu.android',
            'version': '4.7'
        }
        self.all_readings = []
        self.seen_timestamps = set()

    def _get_auth_headers(self):
        headers = self.headers.copy()
        if self.token:
            headers['Authorization'] = f"Bearer {self.token}"
        if self.account_id:
            headers['Account-Id'] = self.account_id
        return headers

    def login(self, email, password):
        login_url = f"{self.base_url}/llu/auth/login"
        login_data = {"email": email, "password": password}

        response = requests.post(login_url, headers=self.headers, json=login_data)
        data = response.json()

        if data.get("status") == 0 and data["data"].get("redirect"):
            region = data["data"].get("region")
            self.base_url = f"https://api-{region}.libreview.io"
            login_url = f"{self.base_url}/llu/auth/login"
            response = requests.post(login_url, headers=self.headers, json=login_data)
            data = response.json()

        if data.get("status") == 0:
            self.token = (data.get('data', {}).get('authTicket', {}).get('token') or
                          data.get('ticket', {}).get('token'))
            user_id = data.get('data', {}).get('user', {}).get('id')
            if user_id:
                self.account_id = hashlib.sha256(user_id.encode('utf-8')).hexdigest().lower()
            print("‚úÖ Login successful!")
            return True
        else:
            print(f"‚ùå Login failed: {data}")
            return False

    def get_connections(self):
        url = f"{self.base_url}/llu/connections"
        headers = self._get_auth_headers()
        response = requests.get(url, headers=headers)
        data = response.json()
        if data.get("status") == 0 and data.get("data"):
            return data["data"]
        return None

    def get_glucose_data(self, patient_id):
        url = f"{self.base_url}/llu/connections/{patient_id}/graph"
        headers = self._get_auth_headers()
        response = requests.get(url, headers=headers)
        data = response.json()
        new_count = 0

        if data.get("status") == 0:
            # Current reading
            conn = data["data"].get("connection", {})
            measurement = conn.get("glucoseMeasurement", {})
            if measurement:
                ts = measurement.get("Timestamp")
                if ts not in self.seen_timestamps:
                    self.seen_timestamps.add(ts)
                    new_count += 1
                    self.all_readings.append({
                        'timestamp': ts,
                        'value_mgdl': measurement.get("ValueInMgPerDl"),
                        'trend_message': measurement.get("TrendMessage"),
                        'is_high': measurement.get("isHigh"),
                        'is_low': measurement.get("isLow")
                    })
                    status = "HIGH" if measurement.get("isHigh") else "LOW" if measurement.get("isLow") else "NORMAL"
                    print(f"ü©∏ New Reading: {measurement.get('ValueInMgPerDl')} mg/dL | Status: {status} | Trend: {measurement.get('TrendMessage')} | Time: {ts}")

            # Historical readings
            for r in data["data"].get("graphData", []):
                ts = r.get("Timestamp")
                if ts not in self.seen_timestamps:
                    self.seen_timestamps.add(ts)
                    new_count += 1
                    self.all_readings.append({
                        'timestamp': ts,
                        'value_mgdl': r.get("ValueInMgPerDl"),
                        'trend_message': r.get("TrendMessage"),
                        'is_high': r.get("isHigh"),
                        'is_low': r.get("isLow")
                    })
                    print(f"üìä Historical New: {r.get('ValueInMgPerDl')} mg/dL | Trend: {r.get('TrendMessage')} | Time: {ts}")

            # Export JSON
            if EXPORT_JSON and new_count > 0:
                with open(JSON_FILENAME, "w") as f:
                    json.dump(sorted(self.all_readings, key=lambda x: x['timestamp']), f, indent=2)

        return new_count

# --- MAIN SCRIPT ---
def main():
    client = LibreViewAPI()
    if not client.login(EMAIL, PASSWORD):
        return

    connections = client.get_connections()
    if not connections:
        print("‚ùå No connections found.")
        return

    patient_id = connections[0].get("patientId")
    print(f"‚è≥ Monitoring patient: {patient_id} (Ctrl+C to stop)")

    try:
        while True:
            new_readings = client.get_glucose_data(patient_id)
            if new_readings == 0:
                print("‚è± No new readings yet...")
            time.sleep(POLL_INTERVAL_SECONDS)
    except KeyboardInterrupt:
        print("\nüõë Monitoring stopped by user.")
        print(f"Total readings collected: {len(client.all_readings)}")
        if EXPORT_JSON:
            print(f"Readings exported to {JSON_FILENAME}")

if __name__ == "__main__":
    main()
